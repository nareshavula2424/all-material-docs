
1.what is spring framework ?

=> Spring framework is powerful,light-weight and opensource framework for java development.
=> it provides comprehensive support for developing java applications, particularly enterprise-level
   applications
=> it simplifies the java development by providing features like DI,AOP,Transaction management and integration with various frameworks.

2.what is springboot, and how it is different from spring framework ?

=> spring boot is an extension of spring framework by providing auto-configuration, embaded servers and convention-
    over - configuration approch.

   SPRING FRAMEWORK                       VS                        SPRING BOOT:
-> configuration - requires XML/ java based                     -> Uses auto configuration
                   config

-> server-setup - Need an external server                       -> By default comes with embaded server
                  (Tomcat,Jetty)

-> dependency
   management  - manual dependency handling                     -> Uses spring boot starters for dependency


3.what is @SpringBootApplication, and what does it do ?

=> @SpringBootApplication is composite annotation that combines
  @Configuration -> it used to define beans in spring
  @EnableAutoConfiguration -> Automatically configures beans based on the dependencies(Ex.,if spring-boot-starter-web is present, it configures an Embaded Tomcat Server,DispatcherServlet,Jackson (for JSON processing)) 
  =>if SpringDataJPA is present , springboot auto configures 
        * Datasource
        * EntityManager
        * TransactionManager

  @ComponetScan -> Scans component like (@Service,@Controller,@Repository)


4.what is Dependency Injection in spring boot ?
=> Dependency Injection in springboot is design pattern spring automatically injects dependencies into components,
  avoid manual instantation.

  why use DI ?
  -> Removes tight coupling 
  -> Enhances testability
  -> Improves Maintainbility

5. what is circular dependency ?
=> Circular dependency is two or more classes, components or modules depend on each other directly or indirectly, creating a cycle.
=> This can lead issues such as stackoverflow,compilation errors, or runtime failures due to infinite loops in dependency resolution.

Example in Java (Spring Boot):
===============================
Consider two classes that depend on each other:

@Component
class A {

  @Autowired
  priavte B b;

  A(B b){
    this.b = b;
  }
}
@Component
class B{

  @Autowired
  private A a;

  B(A a){
    this.a = a;
  }
}

Here, Class A depends on Class B, and Class B depends on Class A, forming a circular dependency.

Why is it a problem?
Spring cannot resolve which bean to initialize first.
It results in BeanCurrentlyInCreationException during application startup.

How to fix it?
✅ Solution 1: Use @Lazy annotation

@Component
class A {
    private final B b;

    @Autowired
    public A(@Lazy B b) { // Lazy initialization
        this.b = b;
    }
}
✅ Solution 2: Use setter injection

@Component
class A {
    private B b;

    @Autowired
    public void setB(B b) {
        this.b = b;
    }
}

one more Example:
=================
@Service
public class ServiceA {
    private ServiceB serviceB;

    ServiceA(@Lazy ServiceB serviceB){
        this.serviceB = serviceB;
    }

    public void execute(){
        serviceB.execute();
    }
    public void executeA(){
        System.out.println("Execute of A class");
    }
}
@Service
public class ServiceB {
    @Autowired
    private ServiceA serviceA;

    ServiceB(ServiceA serviceA){
        this.serviceA = serviceA;
    }
    public void execute(){
        System.out.println("Executed method");
    }
    public void executeB(){
        serviceA.executeA();
    }
}
@SpringBootApplication
public class SpringBootPracticeApplication {

  public static void main(String[] args) {
    ApplicationContext context = SpringApplication.run(SpringBootPracticeApplication.class, args);
    ServiceA serviceA =  context.getBean(ServiceA.class);
    ServiceB serviceB =  context.getBean(ServiceB.class);
    serviceA.execute();
    serviceB.executeB();
  }

}

